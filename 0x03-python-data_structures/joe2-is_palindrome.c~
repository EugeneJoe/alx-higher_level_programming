#include <stdio.h>
#include <stddef.h>
#include "lists.h"

/**
 * split_list - split a listint_t singly linked list into two
 * @head: pointer to head node of listint_t singly linked list
 * @secondlist: pointer to store head of second list
 *
 * Return: pointer to second linked list
 */
listint_t *split_list(listint_t *head, listint_t *second)
{
	listint_t *p, *q;

	p = head;
	q = head;
	while(1)
	{
		p = p->next->next;
		if (p->next == NULL)
		{
			second = q->next->next;
			break;
		}
		if (p == NULL)
		{
			second = q->next;
			break;
		}
		q = q->next;
	}
	q->next = NULL;
	printf("Split finished\n");
	return (second);
}

/**
 * reverse_list - reverses a listint_t singly linked list
 * @head: pointer to head node of listint_t singly linked list
 *
 * Return: no return value (void)
 */
void reverse_list(listint_t *head)
{
	listint_t *current, *prev, *next;

	current = head;
	prev = head;
	next = current->next;
	while (current != NULL)
	{
		current = next;
		next = current->next;
		current->next = prev;
		prev = current;
	}
	head->next = NULL;
	head = current;
}

/**
 * is_palindrome - checks if a singly linked list is a palindrome
 * @head: double pointer to head node to listint_t singly linked list
 *
 * Return: 1 if palindrome, 0 if not palindrome
 */
int is_palindrome(listint_t **head)
{
	listint_t *second, *first;

	first = *head;
	second = NULL;
	printf("Start\n");
	split_list(first, second);
	printf("List split\n");
	reverse_list(second);
	printf("List reversed\n");
	while (first && second)
	{
		if (first->n != second->n)
			return (0);
		first = first->next;
		second = second->next;
	}
	return (1);
}
